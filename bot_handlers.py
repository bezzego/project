from aiogram import Router, types
from yoomoney import Quickpay
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
import uuid
from aiogram.exceptions import TelegramBadRequest

import config
from db import get_subscription, add_payment

router = Router()


@router.message(Command("start"))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    sub = get_subscription(user_id)
    if sub and sub["end_ts"] > int(__import__("time").time()):
        from datetime import datetime

        end = datetime.fromtimestamp(sub["end_ts"]).strftime("%d.%m.%Y %H:%M")
        await message.answer(f"‚úÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {end}.")
        return

    # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Ç –∏–ª–∏ –æ–Ω–∞ –∏—Å—Ç–µ–∫–ª–∞
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç! –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª:\n"
        f"‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å: {config.SUB_PRICE} ‚ÇΩ\n"
        f"‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {config.SUB_DURATION_DAYS} –¥–Ω–µ–π\n\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å"
    )
    # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é –º–µ—Ç–∫—É
    label = f"{user_id}_{uuid.uuid4().hex}"
    # —Å–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É YooMoney

    qp = Quickpay(
        receiver=config.YOOMONEY_WALLET,
        quickpay_form="shop",
        targets="–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏",
        paymentType="AC",
        sum=config.SUB_PRICE,
        label=label,
    )
    pay_url = qp.base_url
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç—ë–∂
    add_payment(user_id, label, config.SUB_PRICE)
    kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å ‚ÇΩ", url=pay_url)]]
    )
    await message.answer("–ü–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:", reply_markup=kb)


# Handler to check bot's rights in the channel
@router.message(Command("check_rights"))
async def cmd_check_rights(message: types.Message):
    bot_user = await message.bot.get_me()
    info = await message.bot.get_chat_member(
        chat_id=config.CHANNEL_ID, user_id=bot_user.id
    )
    can_ban = getattr(info, "can_restrict_members", False)
    can_invite = getattr(info, "can_invite_users", False)
    await message.answer(
        f"–ü—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ:\n"
        f"‚Ä¢ –ú–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å (ban): {can_ban}\n"
        f"‚Ä¢ –ú–æ–∂–µ—Ç –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å: {can_invite}"
    )


# Test handler to ban and unban the invoking user (self-test)
@router.message(Command("test_kick"))
async def cmd_test_kick(message: types.Message):
    user_id = message.from_user.id
    try:
        # Ban and immediately unban to remove from channel
        await message.bot.ban_chat_member(chat_id=config.CHANNEL_ID, user_id=user_id)
        await message.bot.unban_chat_member(chat_id=config.CHANNEL_ID, user_id=user_id)
        await message.answer(
            "‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, –≤—ã —É–¥–∞–ª–µ–Ω—ã –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ –∫–∞–Ω–∞–ª–µ."
        )
    except TelegramBadRequest as e:
        # If user is admin, cannot ban
        if "administrator" in e.message.lower():
            await message.answer("‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞.")
        else:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —É–¥–∞–ª–µ–Ω–∏—è: {e.message}")
